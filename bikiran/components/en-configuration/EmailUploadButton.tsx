import { cn } from "@/bik-lib/utils/cn";
import { TEnConfig } from "./enConfigTypes";
import { useTemplate } from "@/bik-lib/context/template/TemplateProvider";
import { useEnConfig } from "./context/EnConfigProvider";
import { ButtonLoading } from "@/bik-lib/lib/button";
import { TInputChangeEvent } from "@/bik-lib/types/event";
import { FC, useRef, useState } from "react";
import useApi from "@/bik-lib/utils/useApi";
import TooltipWrapper from "@/bik-lib/lib/TooltipWrapper";

const ActiveIcon: FC = () => {
  return (
    <svg
      width="28"
      height="28"
      viewBox="0 0 28 28"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M25.9498 13.89C25.9198 13.63 25.8698 13.37 25.7998 13.15C25.2598 10.98 23.8798 9.49999 21.7198 8.72999C21.5698 8.67999 21.5298 8.63999 21.4998 8.50999C21.2098 7.02999 20.5198 5.78999 19.4498 4.81999C17.2998 2.88999 14.8298 2.40999 12.1098 3.39999C10.6898 3.91999 9.52982 4.87999 8.67982 6.26999C8.64982 6.32999 8.62982 6.34999 8.52982 6.33999H8.45982C8.13982 6.31999 7.81982 6.29999 7.48982 6.32999C6.49982 6.42999 5.56982 6.95999 4.91982 7.76999C4.27982 8.57999 3.97982 9.59999 4.10982 10.58C4.14982 10.86 4.05982 10.99 3.86982 11.15C2.82982 12.04 2.20982 13.19 2.03982 14.55C1.86982 15.97 2.21982 17.3 3.06982 18.49C4.00982 19.79 5.22982 20.55 6.70982 20.74C7.03982 20.78 7.37982 20.78 7.69982 20.78H13.2398V13.7C13.2298 13.71 13.2198 13.72 13.2198 13.72L12.9598 13.98C12.3398 14.6 11.7198 15.22 11.0998 15.84C10.8598 16.08 10.6098 16.17 10.3298 16.1C10.0698 16.03 9.85982 15.84 9.77982 15.59C9.69982 15.34 9.74982 15.06 9.91982 14.85C9.95982 14.8 10.0098 14.76 10.0498 14.71L10.0798 14.69C11.1698 13.6 12.2598 12.5 13.3598 11.41C13.7998 10.96 14.1998 10.96 14.6498 11.41L15.1598 11.93C16.0898 12.85 17.0198 13.78 17.9498 14.71C18.0798 14.85 18.1798 15.01 18.2298 15.16C18.3398 15.48 18.1898 15.84 17.8698 16.02C17.5498 16.2 17.2098 16.14 16.9398 15.87C16.2198 15.16 15.5098 14.45 14.7998 13.73L14.7698 13.7V20.78H18.1898C18.1898 20.78 18.1998 20.77 18.2098 20.77H18.4198C18.5798 20.77 18.7298 20.78 18.8798 20.78H19.0698C19.2698 20.79 19.4698 20.79 19.6798 20.79C19.9598 20.79 20.2398 20.78 20.5198 20.75C22.9798 20.45 24.6998 19.1 25.6198 16.72C25.6598 16.61 25.6998 16.49 25.7398 16.35C25.8398 16.03 25.9198 15.68 25.9598 15.33C26.0198 14.86 26.0098 14.36 25.9498 13.89Z"
        fill="currentcolor"
      />
      <path
        d="M13.2398 24.18C13.2398 24.26 13.2298 24.33 13.2398 24.41C13.2598 24.63 13.3598 24.82 13.5298 24.95C13.6598 25.06 13.8298 25.11 13.9998 25.11C14.0398 25.11 14.0898 25.11 14.1298 25.1C14.4198 25.05 14.7698 24.86 14.7698 24.22V20.78H13.2398V24.18Z"
        fill="currentcolor"
      />
    </svg>
  );
};

const InactiveIcon: FC = () => {
  return (
    <svg
      width="28"
      height="28"
      viewBox="0 0 28 28"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M17.8712 16.0172C18.1898 15.8387 18.3383 15.485 18.2322 15.1575C18.1847 15.0096 18.083 14.8521 17.9461 14.7143C17.022 13.7819 16.0933 12.8543 15.1649 11.9268L14.6484 11.4107C14.2019 10.9642 13.8042 10.9633 13.359 11.4083C12.264 12.5023 11.1696 13.5973 10.0753 14.692L10.0521 14.7149C10.0079 14.7589 9.96372 14.8031 9.92412 14.8512C9.75107 15.0628 9.69748 15.3393 9.78039 15.5911C9.86243 15.8405 10.0674 16.0288 10.3284 16.0951C10.6065 16.166 10.8593 16.0827 11.1004 15.8403C11.7184 15.2192 12.338 14.6001 12.9578 13.9808L13.2172 13.7215C13.2233 13.7154 13.2295 13.7093 13.2358 13.7034L13.236 24.1221L13.2358 24.1842C13.2354 24.2595 13.2349 24.3345 13.2406 24.4093C13.2581 24.6275 13.3607 24.82 13.5298 24.9514C13.6644 25.0562 13.826 25.1109 13.9954 25.1109C14.0404 25.1109 14.0857 25.107 14.1314 25.0993C14.422 25.0497 14.7685 24.8578 14.7685 24.2238L14.7689 13.6959C14.7792 13.7086 14.7901 13.7209 14.802 13.7327C15.5112 14.4467 16.2215 15.1597 16.9362 15.8685C17.2117 16.1417 17.5525 16.1958 17.8712 16.0172Z"
        fill="currentcolor"
      />
      <path
        d="M25.9528 13.8891C25.9199 13.629 25.8674 13.3702 25.8038 13.1547C25.2591 10.983 23.8835 9.49541 21.7155 8.73367C21.5746 8.68357 21.5291 8.63522 21.5039 8.50921C21.2106 7.02641 20.519 5.78579 19.4484 4.82212C17.2962 2.88976 14.8283 2.41132 12.1143 3.40036C10.6853 3.91971 9.53151 4.88447 8.68467 6.26861C8.64529 6.33358 8.62516 6.34868 8.5265 6.34277L8.45977 6.33883C8.143 6.32002 7.81551 6.30077 7.49173 6.33227C6.50444 6.43181 5.56725 6.95706 4.92014 7.7735C4.27871 8.58294 3.9836 9.60479 4.1107 10.5768C4.14789 10.8605 4.06279 10.9887 3.87028 11.1532C2.82567 12.044 2.21093 13.1886 2.04336 14.555C1.8701 15.9742 2.21662 17.2984 3.07375 18.4909C4.00854 19.7941 5.2321 20.5512 6.71074 20.7409C7.04064 20.782 7.37841 20.7796 7.70459 20.7776C7.80304 20.7772 7.90148 20.7761 7.99883 20.7767C8.29023 20.7789 8.579 20.7789 8.86974 20.7789C9.3099 20.7811 9.74787 20.7811 10.1872 20.7789C10.3899 20.7789 10.5829 20.6995 10.7312 20.5538C10.8756 20.4068 10.955 20.2141 10.955 20.0113C10.955 19.595 10.6297 19.2585 10.2119 19.2456C9.76318 19.2434 9.31668 19.2434 8.87018 19.2434H7.30381C7.20362 19.2434 7.09642 19.2417 6.9912 19.229C5.80111 19.0824 4.86238 18.4688 4.20061 17.4047C3.39315 16.1087 3.31548 14.7775 3.9696 13.4487C4.26296 12.8557 4.70618 12.3717 5.32485 11.9692C5.77835 11.6726 5.87483 11.4192 5.73898 10.8879C5.73395 10.8664 5.72716 10.845 5.72016 10.8235C5.71513 10.8078 5.70988 10.792 5.70572 10.7748C5.48761 9.90494 5.68932 9.14867 6.30493 8.52671C6.93213 7.89513 7.69344 7.68906 8.56741 7.9146C9.25915 8.09115 9.50679 7.98308 9.82925 7.36463C10.9128 5.28088 13.2925 4.11288 15.6152 4.52329C17.9849 4.94463 19.7768 6.8304 20.0741 9.21495C20.1386 9.74808 20.3346 9.96598 20.8507 10.0786C22.0524 10.3416 23.0819 11.0725 23.7498 12.137C24.4196 13.2052 24.6301 14.4559 24.3422 15.6585C23.8364 17.7762 21.889 19.3204 19.8081 19.2476C19.1069 19.2231 18.3929 19.229 17.7022 19.2355L17.5749 19.2366C17.1514 19.2366 16.807 19.5801 16.807 20.0111C16.807 20.407 17.1032 20.735 17.5071 20.7746H18.4215C18.5764 20.7746 18.7311 20.7767 18.8849 20.7789L19.0651 20.7835C19.2675 20.7888 19.4725 20.7943 19.6783 20.7943C19.961 20.7943 20.2447 20.7842 20.5236 20.7498C22.9806 20.4534 24.6953 19.0955 25.62 16.7154C25.6633 16.6062 25.7025 16.4863 25.7382 16.3544C25.8436 16.0282 25.918 15.6841 25.9593 15.3317C26.0158 14.8561 26.0134 14.3571 25.9528 13.8891Z"
        fill="currentcolor"
      />
    </svg>
  );
};

const EmailUploadButton: FC<{
  data: TEnConfig;
}> = ({ data }) => {
  const [loading, setLoading] = useState<boolean>(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const { put } = useApi();
  const { setMessage, closeModal } = useTemplate();

  const { reload } = useEnConfig();

  const handleAddPhoto = (ev: TInputChangeEvent) => {
    ev.preventDefault();
    ev.stopPropagation();

    // Uploading....
    setLoading(true);

    if (ev.target.files && ev.target.files.length > 0) {
      const file = ev.target.files[0];
      if (file) {
        const reader = new FileReader();

        reader.onload = () => {
          const blob = new Blob([reader.result as ArrayBuffer], {
            type: file.type,
          });
          const formData = new FormData();
          formData.append("file", blob, file.name);

          put(
            `/admin/notification/email/config/${data?.key || ""}/upload-html-template`,
            formData,
            {
              headers: { "Content-Type": "multipart/form-data" },
            }
          )
            .then(({ message }) => {
              setMessage(message);
              reload();
              closeModal();
            })
            .catch((err: Error) => {
              setMessage(err.message);
            })
            .finally(() => {
              // Uploaded
              setLoading(false);
            });
        };

        reader.onerror = (err) => {
          console.log("Error reading file:", err);
        };

        reader.readAsArrayBuffer(file); // Read the file as an ArrayBuffer for creating Blob
      }
    }
  };

  const handleFileInputClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const isActive = data.status === "active";
  return (
    <TooltipWrapper asChild content={"Upload HTML Template"} ignore={!isActive}>
      <button
        type="button"
        onClick={handleFileInputClick}
        disabled={!isActive}
        className={cn("relative text-secondary", {
          "text-primary-500": !isActive,
        })}
      >
        {data?.isTemplateUploaded && isActive ? (
          <ActiveIcon />
        ) : (
          <InactiveIcon />
        )}

        <input
          ref={fileInputRef}
          type="file"
          onChange={handleAddPhoto}
          hidden
          accept=".html .zip"
        />

        {loading && <ButtonLoading />}
      </button>
    </TooltipWrapper>
  );
};

export default EmailUploadButton;
